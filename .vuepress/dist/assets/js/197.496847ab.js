(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{641:function(t,e,r){"use strict";r.r(e);var o=r(1),s=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"future-improvements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#future-improvements"}},[t._v("#")]),t._v(" Future Improvements")]),t._v(" "),e("ul",[e("li",[t._v("The fee distribution registration could be extended to register the withdrawal address to the owner of the contract according to "),e("a",{attrs:{href:"https://eips.ethereum.org/EIPS/eip-173",target:"_blank",rel:"noopener noreferrer"}},[t._v("EIP173"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[t._v("Extend the supported message types for the transaction fee distribution to Cosmos transactions that interact with the EVM (eg: ERC20 module, IBC transactions).")]),t._v(" "),e("li",[t._v("Distribute fees for internal transaction calls to other registered contracts. At this time, we only send transaction fees to the deployer of the smart contract represented by the "),e("code",[t._v("to")]),t._v(" field of the transaction request ("),e("code",[t._v("MyContract")]),t._v("). We do not distribute fees to smart contracts called internally by "),e("code",[t._v("MyContract")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("CREATE2")]),t._v(" opcode support for address derivation. When registering a smart contract, we verify that its address is derived from the deployerâ€™s address. At this time, we only support the derivation path using the "),e("code",[t._v("CREATE")]),t._v(" opcode, which accounts for most cases.")])])])}),[],!1,null,null,null);e.default=s.exports}}]);